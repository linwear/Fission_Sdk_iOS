#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef NATIVELIB_SWIFT_H
#define NATIVELIB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NativeLib",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class TimeoutConfig;
@class WatchInfo;
@class ErrorCode;
@class NSString;
@class NSData;
@class SubscriptionInfo;
@class DrawStyle;
@class AiSmart;
@class NSURL;
SWIFT_CLASS("_TtC9NativeLib6AFlash")
@interface AFlash : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AFlash * _Nonnull shared;)
+ (AFlash * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 设置超时配置
/// \param timeoutConfig 超时配置。
/// <ul>
///   <li>
///     <code>requestTimeout</code>: 连接超时时间，单位为秒。如果在指定的时间内无法建立连接，请求将会失败。
///   </li>
///   <li>
///     <code>resourceTimeout</code>: 数据读取超时时间，单位为秒。如果在指定的时间内无法读取到数据，请求将会失败。
///   </li>
/// </ul>
///
- (AFlash * _Nonnull)setTimeoutConfigWithTimeoutConfig:(TimeoutConfig * _Nonnull)timeoutConfig SWIFT_WARN_UNUSED_RESULT;
/// 初始化SDK
/// \param watches 包含手表信息的 <code>WatchInfo</code> 数组。
///
/// \param onSuccess 初始化成功时调用的闭包，包含可用的手表设备列表以及订阅信息。
///
/// \param onFailure 初始化失败时调用的闭包，包含错误码以及错误描述。
/// - <code>ErrorCode</code>的属性：
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)initializeWithWatchInfos:(NSArray<WatchInfo *> * _Nonnull)watchInfos onSuccess:(void (^ _Nonnull)(NSArray<WatchInfo *> * _Nonnull))onSuccess onFailure:(void (^ _Nonnull)(ErrorCode * _Nonnull))onFailure;
/// 将语音数据转换成文本
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param data 语音数据的<code>Data</code>对象。
///
/// \param fileFormat 语音文件的音频格式（目前支持识别格式：mp3、ogg、m4a、wav、amr、opus、pcm）。
///
/// \param language 语音数据的语言。如（印度英语：en-IN、印地语：hi-IN）。
///
/// \param onSuccess 成功回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>text</code>: 转换后的文本。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>errorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)speechToTextWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid data:(NSData * _Nonnull)data fileFormat:(NSString * _Nonnull)fileFormat language:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 将文本转成音频数据
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param text 要转换为语音的文本内容。
///
/// \param fileFormat 语音文件的音频类型（目前支持格式：mp3、ogg、m4a、wav、amr、opus、pcm）。
///
/// \param onSuccess 成功回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>data</code>: 音频数据。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)textToSpeechWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid text:(NSString * _Nonnull)text fileFormat:(NSString * _Nonnull)fileFormat onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSData * _Nonnull))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 文本问答
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param inputContent 用户输入的文本内容。
///
/// \param contentId 内容的唯一标识符，上次对话返回的contentId，首次没有填空即可。
///
/// \param language 当前语言。如（印度英语：en-IN、印地语：hi-IN）。
///
/// \param onSuccess 成功回调，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>sendTextContent</code>: 发送的文本内容。
/// - <code>answerTextContent</code>: 回答文本内容。
/// - <code>contentId</code>: 内容的唯一标识符。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)textChatWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid inputContent:(NSString * _Nonnull)inputContent contentId:(NSString * _Nonnull)contentId language:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSString * _Nonnull, NSString * _Nonnull, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 语音数据问答
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param data 语音数据。
///
/// \param fileFormat 语音文件的音频类型（目前支持识别格式：mp3、ogg、m4a、wav、amr、opus、pcm）。
///
/// \param contentId 内容的唯一标识符，上次对话返回的contentId，首次没有填空即可。
///
/// \param language 当前语言。如（印度英语：en-IN、印地语：hi-IN）。
///
/// \param onSuccess 成功回调闭包，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>sendTextContent</code>: 发送的文本内容。
/// - <code>answerTextContent</code>: 回答文本内容。
/// - <code>contentId</code>: 内容的唯一标识符。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)voiceChatWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid data:(NSData * _Nonnull)data fileFormat:(NSString * _Nonnull)fileFormat contentId:(NSString * _Nonnull)contentId language:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSString * _Nonnull, NSString * _Nonnull, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 获取画图风格。
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param language 请求的语言代码，例如 “en” 表示英语，“zh” 表示中文。
///
/// \param onSuccess 成功回调闭包，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>drawStyles</code>: 画图风格列表。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)fetchDrawStyleListWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid language:(NSString * _Nonnull)language onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSArray<DrawStyle *> * _Nonnull))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 文本画图，返回图片的URL。
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param inputContent 需要绘制的文本内容。
///
/// \param imgFormat 图片格式，默认”jpeg”（支持”png”，“jpeg”）。
///
/// \param style 画图风格（支持1.水墨风格，2.赛博朋克，3.动漫风格，4.折纸风格，5.针织风格，6.平面动画风格，7.3D卡通风格，8.乐高风格，9.铅笔画）。
/// 该参数可以使用所支持的数字，也可通过DrawStyle的value属性获得。
///
/// \param language 当前语言。如（印度英语：en-IN、印地语：hi-IN）。
///
/// \param onSuccess 成功回调闭包，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>sendTextContent</code>: 发送的文本内容。
/// - <code>imgUrl</code>: 生成的图片 URL。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)textDrawingWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid inputContent:(NSString * _Nonnull)inputContent imgFormat:(NSString * _Nonnull)imgFormat style:(NSInteger)style language:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSString * _Nonnull, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 文本画图，返回指定分辨率的图片数据。
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param inputContent 需要绘制的文本内容。
///
/// \param imgFormat 图片格式，默认”jpeg”（支持”png”，“jpeg”）。
///
/// \param style 画图风格（支持1.水墨风格，2.赛博朋克，3.动漫风格，4.折纸风格，5.针织风格，6.平面动画风格，7.3D卡通风格，8.乐高风格，9.铅笔画）。
/// 该参数可以使用所支持的数字，也可通过DrawStyle的value属性获得。
///
/// \param language 当前语言。如（印度英语：en-IN、印地语：hi-IN）。
///
/// \param onSuccess 成功回调闭包，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>sendTextContent</code>: 发送的文本内容。
/// - <code>imgData</code>: 生成的图片数据。
/// - <code>thuImgData</code>: 缩略图的图片数据。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)textDrawingToDataWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid inputContent:(NSString * _Nonnull)inputContent imgFormat:(NSString * _Nonnull)imgFormat style:(NSInteger)style language:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSData * _Nonnull, NSData * _Nullable, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 语音数据画图，返回图片URL
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表设备的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param data 语音数据。
///
/// \param audioFormat 音频文件格式（目前支持识别格式：mp3、ogg、m4a、wav、amr、opus、pcm）。
///
/// \param imgFormat 图片格式，默认”jpeg”（支持”png”，“jpeg”）。
///
/// \param style 画图风格（支持1.水墨风格，2.赛博朋克，3.动漫风格，4.折纸风格，5.针织风格，6.平面动画风格，7.3D卡通风格，8.乐高风格，9.铅笔画）。
/// 该参数可以使用所支持的数字，也可通过DrawStyle的value属性获得。
///
/// \param language 当前语言。如（印度英语：en-IN、印地语：hi-IN）。
///
/// \param onSuccess 成功回调闭包，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>sendTextContent</code>: 发送的文本内容。
/// - <code>imgUrl</code>: 生成的图片 URL。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)voiceDrawingWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid data:(NSData * _Nonnull)data audioFormat:(NSString * _Nonnull)audioFormat imgFormat:(NSString * _Nonnull)imgFormat style:(NSInteger)style language:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSString * _Nonnull, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 语音数据画图，返回指定分辨率的图片数据。
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表设备的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param data 语音数据。
///
/// \param audioFormat 音频文件格式（目前支持识别格式：mp3、ogg、m4a、wav、amr、opus、pcm）。
///
/// \param imgFormat 图片格式，默认”jpeg”（支持”png”，“jpeg”）。
///
/// \param style 画图风格（支持1.水墨风格，2.赛博朋克，3.动漫风格，4.折纸风格，5.针织风格，6.平面动画风格，7.3D卡通风格，8.乐高风格，9.铅笔画）。
/// 该参数可以使用所支持的数字，也可通过DrawStyle的value属性获得。
///
/// \param language 当前语言。如（印度英语：en-IN、印地语：hi-IN）。
///
/// \param onSuccess 成功回调闭包，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>sendTextContent</code>: 发送的文本内容。
/// - <code>imgData</code>: 生成的图片数据。
/// - <code>thuImgData</code>: 缩略图的图片数据。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)voiceDrawingToDataWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid data:(NSData * _Nonnull)data audioFormat:(NSString * _Nonnull)audioFormat imgFormat:(NSString * _Nonnull)imgFormat style:(NSInteger)style language:(NSString * _Nullable)language onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSData * _Nonnull, NSData * _Nullable, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 获取智能体列表。
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param language 请求的语言代码，例如 “en” 表示英语，“zh” 表示中文。
///
/// \param pageSize 每页显示的智能代理数量，默认值为 10。
///
/// \param pageNum 请求的页码，默认值为 1。
///
/// \param onSuccess 成功时调用的闭包，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>totalPage</code>: 总页数。
/// - <code>currentPage</code>: 当前页码。
/// - <code>aiSmarts</code>: 当前页的智能体数组。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)fetchAgentListWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid language:(NSString * _Nonnull)language pageSize:(NSInteger)pageSize pageNum:(NSInteger)pageNum onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSInteger, NSInteger, NSArray<AiSmart *> * _Nonnull))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 发起聊天
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 手表的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param code 聊天的唯一标识码，通过获取智能体列表接口获取。
///
/// \param inputType 输入类型（text、img、audio）。
///
/// \param contentId 内容标识符，上次对话返回的contentId，首次没有填空即可，默认为nil。
///
/// \param textContent 文本内容，默认为nil。
///
/// \param data 文件数据，默认为nil。
///
/// \param fileFormat 文件格式，默认为nil。
///
/// \param inputLanguage 输入语言, 默认为ni, 如翻译智能体需要输入的语言
///
/// \param outputLanguage 输出语言, 默认为ni, 如翻译智能体需要输出的语言
///
/// \param onSuccess 成功回调闭包，包含以下参数：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>sendTextContent</code>: 发送的文本内容。
/// - <code>outputType</code>: 输出类型（text、img）。
/// - <code>contentId</code>: 响应的内容标识符。
/// - <code>answerTextContent</code>: 响应的文本内容，当输出类型为 “text”时有内容，否则为 <code>nil</code>。
/// - <code>imgUrl</code>: 图片URL，当输出类型为 “img”时有内容，否则为 <code>nil</code>。
/// - <code>thumbnail</code>: 缩略图URL，当输出类型为 “img”时有内容，否则为 <code>nil</code>。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)chatWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid code:(NSString * _Nonnull)code inputType:(NSString * _Nonnull)inputType contentId:(NSString * _Nullable)contentId textContent:(NSString * _Nullable)textContent data:(NSData * _Nullable)data fileFormat:(NSString * _Nullable)fileFormat inputLanguage:(NSString * _Nullable)inputLanguage outputLanguage:(NSString * _Nullable)outputLanguage onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSString * _Nonnull, NSString * _Nonnull, NSString * _Nullable, NSString * _Nullable, NSString * _Nullable, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 分析数据。
/// \param requestId 请求id，确保会话一性。可通过uuid或时间戳等生成。
///
/// \param wid 数据的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param data 要分析的数据, 具体格式json。
///
/// \param onSuccess 成功回调闭包，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>content</code>：分析的结果。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>requestId</code>: 请求id，确保会话一性。
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)analyzeDataWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid data:(NSData * _Nonnull)data onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(NSString * _Nonnull, ErrorCode * _Nonnull))onFailure;
/// 提交音频文件
/// \param wid 数据的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param fileURL 音频文件
///
/// \param fileFormat 文件格式。
///
/// \param inputLanguage 输入语言。
///
/// \param onSuccess 成功回调闭包，参数说明：
/// - <code>requestId</code>: 会议纪要id。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)meetingAudioFileUpload2SttWithWid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid fileURL:(NSURL * _Nonnull)fileURL fileFormat:(NSString * _Nonnull)fileFormat inputLanguage:(NSString * _Nullable)inputLanguage onSuccess:(void (^ _Nonnull)(NSString * _Nonnull, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(ErrorCode * _Nonnull))onFailure;
/// 会议纪要。
/// \param requestId 获取会议纪要的唯一标识。
///
/// \param wid 数据的唯一标识符。
///
/// \param thirdUuid 第三方标识符。
///
/// \param onSuccess 成功回调闭包，参数说明：
/// - <code>content</code>: 生成的内容。
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)meetingSummaryWithRequestId:(NSString * _Nonnull)requestId wid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid onSuccess:(void (^ _Nonnull)(NSString * _Nullable, SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(ErrorCode * _Nonnull))onFailure;
/// 查询订阅信息。
/// \param wid 数据的唯一标识符。
///
/// \param onSuccess 成功回调闭包，参数说明：
/// - <code>subscriptionInfo</code>: 订阅信息。
///
/// \param onFailure 失败回调，参数说明：
/// - <code>ErrorCode</code>：包含错误码以及错误描述。
/// - <code>code</code>: 错误码。
/// - <code>message</code>: 错误信息。
///
- (void)querySubscriptionInfoWithWid:(NSString * _Nonnull)wid thirdUuid:(NSString * _Nullable)thirdUuid onSuccess:(void (^ _Nonnull)(SubscriptionInfo * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(ErrorCode * _Nonnull))onFailure;
@end

SWIFT_CLASS("_TtC9NativeLib7AiSmart")
@interface AiSmart : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull aismartCode;
@property (nonatomic, readonly) NSInteger asType;
@property (nonatomic, readonly) NSInteger authorizedUser;
@property (nonatomic, readonly, copy) NSString * _Nonnull avatarUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull creator;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileSize;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileType;
@property (nonatomic, readonly) NSInteger inputFile;
@property (nonatomic, readonly) NSInteger inputImg;
@property (nonatomic, readonly) NSInteger inputText;
@property (nonatomic, readonly, copy) NSString * _Nonnull presetGreet;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull presetQuiz;
@property (nonatomic, readonly, copy) NSString * _Nonnull role;
@property (nonatomic, readonly) NSInteger usageCount;
@property (nonatomic, readonly) NSInteger homepage;
@property (nonatomic, readonly, copy) NSString * _Nonnull imgSize;
@property (nonatomic, readonly, copy) NSString * _Nonnull imgType;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name aismartCode:(NSString * _Nonnull)aismartCode asType:(NSInteger)asType authorizedUser:(NSInteger)authorizedUser avatarUrl:(NSString * _Nonnull)avatarUrl creator:(NSString * _Nonnull)creator fileSize:(NSString * _Nonnull)fileSize fileType:(NSString * _Nonnull)fileType inputFile:(NSInteger)inputFile inputImg:(NSInteger)inputImg inputText:(NSInteger)inputText presetGreet:(NSString * _Nonnull)presetGreet presetQuiz:(NSArray<NSString *> * _Nonnull)presetQuiz role:(NSString * _Nonnull)role usageCount:(NSInteger)usageCount homepage:(NSInteger)homepage imgSize:(NSString * _Nonnull)imgSize imgType:(NSString * _Nonnull)imgType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AnalysisType, "AnalysisType", open) {
  AnalysisTypeHEALTH_DATA_ANALYSIS = 1,
  AnalysisTypeHEALTH_TIPS = 2,
  AnalysisTypeSLEEP_ANALYSIS = 3,
  AnalysisTypeHEART_RATE_ANALYSIS = 4,
  AnalysisTypeBLOOD_OXYGEN_ANALYSIS = 5,
  AnalysisTypeSTEP_ANALYSIS = 6,
  AnalysisTypeBLOOD_PRESSURE_ANALYSIS = 7,
  AnalysisTypeBODY_TEMPERATURE_ANALYSIS = 8,
  AnalysisTypeHEALTH_PLAN_PRO = 9,
  AnalysisTypeHEALTH_PLAN_FAMILY_EDITION = 10,
  AnalysisTypeWEIGHT_LOSS_PLAN = 11,
  AnalysisTypeDIET_ADVICE_ANALYSIS = 12,
  AnalysisTypeDIET_PLAN = 13,
  AnalysisTypeSTRESS_ANALYSIS = 14,
};

SWIFT_CLASS("_TtC9NativeLib9DrawStyle")
@interface DrawStyle : NSObject
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull avatarUrl;
@property (nonatomic) NSInteger value;
- (nonnull instancetype)initWithAvatarUrl:(NSString * _Nonnull)avatarUrl name:(NSString * _Nonnull)name value:(NSInteger)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC9NativeLib9ErrorCode")
@interface ErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PARAMETER_ERROR;)
+ (NSString * _Nonnull)PARAMETER_ERROR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TIME_OUT;)
+ (NSString * _Nonnull)TIME_OUT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NO_ACCESS_SERVER;)
+ (NSString * _Nonnull)NO_ACCESS_SERVER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UNKNOWN_ERROR;)
+ (NSString * _Nonnull)UNKNOWN_ERROR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UPLOAD_FILE_ERROR;)
+ (NSString * _Nonnull)UPLOAD_FILE_ERROR SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull code;
@property (nonatomic, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, LicenseModel, "LicenseModel", open) {
  LicenseModelKNOWN_DEVICE = 0,
  LicenseModelCONSUMER_DEVICE = 1,
};

SWIFT_CLASS("_TtC9NativeLib10MemberInfo")
@interface MemberInfo : NSObject
@property (nonatomic) NSInteger level;
@property (nonatomic) NSInteger availableNum;
@property (nonatomic) NSInteger freeDay;
- (nonnull instancetype)initWithLevel:(NSInteger)level availableNum:(NSInteger)availableNum freeDay:(NSInteger)freeDay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MemberModel, "MemberModel", open) {
  MemberModelFREE = 0,
  MemberModelVIP = 1,
  MemberModelS_VIP = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, PaymentModel, "PaymentModel", open) {
  PaymentModelC_END_PAY = 0,
  PaymentModelLICENSE_PAY = 1,
};

SWIFT_CLASS("_TtC9NativeLib16SubscriptionInfo")
@interface SubscriptionInfo : NSObject
@property (nonatomic) NSInteger identityType;
@property (nonatomic) NSInteger validCountToB;
@property (nonatomic) int64_t validTimeToB;
@property (nonatomic) NSInteger validCountToC;
@property (nonatomic) int64_t validTimeToC;
@property (nonatomic) NSInteger freeDays;
/// 初始化方法
/// \param identityType 身份类型。
///
- (nonnull instancetype)initWithIdentityType:(NSInteger)identityType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC9NativeLib13TimeoutConfig")
@interface TimeoutConfig : NSObject
@property (nonatomic, readonly) NSTimeInterval requestTimeout;
@property (nonatomic, readonly) NSTimeInterval resourceTimeout;
- (nonnull instancetype)initWithRequestTimeout:(NSTimeInterval)requestTimeout resourceTimeout:(NSTimeInterval)resourceTimeout OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC9NativeLib9WatchInfo")
@interface WatchInfo : NSObject
@property (nonatomic) enum PaymentModel payModel;
@property (nonatomic, copy) NSString * _Nonnull wid;
@property (nonatomic) enum LicenseModel licenseModel;
@property (nonatomic, copy) NSString * _Nonnull thirdUuid;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull avatarUrl;
@property (nonatomic, copy) NSString * _Nonnull resolution;
@property (nonatomic, copy) NSString * _Nonnull thuResolution;
@property (nonatomic, copy) NSString * _Nonnull language;
@property (nonatomic, copy) NSString * _Nonnull supportedLanguages;
@property (nonatomic, strong) SubscriptionInfo * _Nullable subscriptionInfo;
/// 初始化方法
/// \param payModel 支付模式。
///
/// \param wid 手表唯一标识。
///
- (nonnull instancetype)initWithPayModel:(enum PaymentModel)payModel wid:(NSString * _Nonnull)wid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
