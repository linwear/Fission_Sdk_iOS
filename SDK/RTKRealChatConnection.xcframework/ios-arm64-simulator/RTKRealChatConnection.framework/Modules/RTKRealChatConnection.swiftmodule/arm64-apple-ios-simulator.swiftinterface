// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RTKRealChatConnection
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AudioToolbox
import Foundation
import RTKAudioStreaming
import RTKLEFoundation
@_exported import RTKRealChatConnection
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
open class RTKBeeCommand {
  open var cmdId: Swift.UInt8 {
    get
  }
  public var key: Swift.UInt8
  public var value: Foundation.Data?
  public var responseWanted: Swift.Bool
  public func couldBeResponded(by event: RTKRealChatConnection.RTKBeeEvent) -> Swift.Bool
  public var concluded: Swift.Bool
  public func complete(result success: Swift.Bool, error: (any Swift.Error)?)
  public init(key: Swift.UInt8, value: Foundation.Data? = nil, completion: ((Swift.Bool, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc deinit
}
open class RTKBeeEvent {
  public var cmdId: Swift.UInt8
  public var key: Swift.UInt8
  public var value: Foundation.Data?
  public init(value: Foundation.Data?)
  public init(cmdId: Swift.UInt8, key: Swift.UInt8, value: Foundation.Data?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RealChatPeripheralConnection : RTKRealChatConnection.RTKBeePeripheralConnection {
  public var isProcessing: Swift.Bool {
    get
  }
  @_hasMissingDesignatedInitializers public class ChatMessage {
    final public let id: Swift.Int
    final public let time: Foundation.Date
    public var text: Swift.String?
    public var speechFileURL: Foundation.URL?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Completion {
    final public let prompt: RTKRealChatConnection.RealChatPeripheralConnection.ChatMessage
    public var response: RTKRealChatConnection.RealChatPeripheralConnection.ChatMessage?
    public var isFinished: Swift.Bool
    @objc deinit
  }
  public var chat: [RTKRealChatConnection.RealChatPeripheralConnection.Completion] {
    get
  }
  public var chatServiceInvocation: ((_ promptMsg: RTKRealChatConnection.RealChatPeripheralConnection.ChatMessage, _ onRecognizedHandler: @escaping (_ promptText: Swift.String) -> Swift.Void, _ requireResponseText: Swift.Bool, _ onReplyTextHandler: @escaping (_ text: Swift.String) -> Swift.Void, _ requireResponseSpeech: Swift.Bool, _ onReplySpeechHandler: @escaping (_ speechFileURL: Foundation.URL) -> Swift.Void) -> Swift.Void)?
  public var onSendPromptRecognizedTextResultHandler: ((_ success: Swift.Bool, _ message: RTKRealChatConnection.RealChatPeripheralConnection.ChatMessage) -> Swift.Void)?
  public var onSendResponseTextResultHandler: ((_ success: Swift.Bool, _ message: RTKRealChatConnection.RealChatPeripheralConnection.ChatMessage) -> Swift.Void)?
  public enum AudioTransmissionState {
    case started, end, cancelled, interrupted
    public static func == (a: RTKRealChatConnection.RealChatPeripheralConnection.AudioTransmissionState, b: RTKRealChatConnection.RealChatPeripheralConnection.AudioTransmissionState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var onPromptAudioTransmissionStateUpdateHandler: ((_ state: RTKRealChatConnection.RealChatPeripheralConnection.AudioTransmissionState, _ promptMsg: RTKRealChatConnection.RealChatPeripheralConnection.ChatMessage, _ file: RTKAudioStreaming.FileSink) -> Swift.Void)?
  public var onResponseAudioTransmissionStateUpdateHandler: ((_ state: RTKRealChatConnection.RealChatPeripheralConnection.AudioTransmissionState, _ responseMsg: RTKRealChatConnection.RealChatPeripheralConnection.ChatMessage, _ file: RTKAudioStreaming.FileSource) -> Swift.Void)?
  override public func onReceive(event evt: RTKRealChatConnection.RTKBeeEvent)
  @objc override dynamic public init(peripheral: CoreBluetooth.CBPeripheral)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RTKBeePeripheralConnection : RTKLEFoundation.RTKConnectionUponGATT, RTKLEFoundation.RTKPacketTransportClient {
  @objc override public static var interestedServiceUUIDs: [CoreBluetooth.CBUUID]? {
    @objc get
  }
  @objc override dynamic public var status: RTKLEFoundation.RTKProfileConnectionStatus {
    @objc get
    @objc set
  }
  public var msgTransport: RTKLEFoundation.RTKPacketTransport!
  @objc override dynamic public func activate(completionHandler handler: RTKLEFoundation.RTKLECompletionBlock? = nil)
  open func emit(directive cmd: RTKRealChatConnection.RTKBeeCommand)
  open func emit(directives cmds: [RTKRealChatConnection.RTKBeeCommand])
  open func onReceive(event evt: RTKRealChatConnection.RTKBeeEvent)
  @objc public func transportDidChangeState(_ transport: RTKLEFoundation.RTKPacketTransport)
  @objc public func transport(_ transport: RTKLEFoundation.RTKPacketTransport, didReceive data: Foundation.Data)
  @objc override dynamic public init(peripheral: CoreBluetooth.CBPeripheral)
  @objc override dynamic public init()
  @objc deinit
}
public enum BeeError : Swift.Int, Swift.RawRepresentable {
  public static var domain: Swift.String
  case crc
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RTKRealChatConnection.RealChatPeripheralConnection.AudioTransmissionState : Swift.Equatable {}
extension RTKRealChatConnection.RealChatPeripheralConnection.AudioTransmissionState : Swift.Hashable {}
extension RTKRealChatConnection.BeeError : Swift.Equatable {}
extension RTKRealChatConnection.BeeError : Swift.Hashable {}
