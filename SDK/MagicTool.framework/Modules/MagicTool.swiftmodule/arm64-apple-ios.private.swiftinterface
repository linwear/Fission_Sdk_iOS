// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MagicTool
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import Foundation
import Starscream
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol IClientBuilder {
  @objc func withDeviceId(deviceId: Swift.String) -> any MagicTool.IClientBuilder
  @objc func withBundleId(bundleId: Swift.String) -> any MagicTool.IClientBuilder
  @objc func withClientId(clientId: Swift.String) -> any MagicTool.IClientBuilder
  @objc func withClientSecret(secret: Swift.String) -> any MagicTool.IClientBuilder
  @objc func builder() -> any MagicTool.IMagicClient
}
@_hasMissingDesignatedInitializers @objc public class MapClientImpl : ObjectiveC.NSObject {
  @objc public func auth(callBack: any MagicTool.MapCallback, aaa: Swift.Int)
  @objc public func mapMonitor(eventType: Swift.String)
  @objc deinit
}
@objc public protocol IMagicClient {
}
@objc public protocol TranslateCallback {
  @objc func translateResult(result: Swift.String?)
  @objc func translateFailure(reason: Foundation.NSError?)
}
@_inheritsConvenienceInitializers @objc public class VopClientBuilder : ObjectiveC.NSObject, MagicTool.IClientBuilder {
  @objc override dynamic public init()
  @objc public func withDeviceId(deviceId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withBundleId(bundleId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withClientId(clientId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withClientSecret(secret: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withAppid(appid: Swift.String) -> MagicTool.VopClientBuilder
  @objc public func withAppKey(appKey: Swift.String) -> MagicTool.VopClientBuilder
  @objc public func withSecretKey(secretKey: Swift.String) -> MagicTool.VopClientBuilder
  @objc public func builder() -> any MagicTool.IMagicClient
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VopClientImpl : ObjectiveC.NSObject {
  @objc public func asrResult(content: [Swift.UInt8], isSendFinishFrame: Swift.Bool, asrFrameBody: Swift.String, callback: any MagicTool.VopCallback)
  @objc public func stopAsrResult()
  @objc public func getTtsUrl(content: Swift.String, audioConfig: Swift.String, callback: any MagicTool.VopCallback)
  @objc public func getDcschatResult(body: MagicTool.DcsChatRequestBody, callback: any MagicTool.VopCallback)
  @objc deinit
}
@objc @objcMembers public class TestDcsChatRequestBody : ObjectiveC.NSObject, Swift.Encodable {
  @objc public init(thirdUserId: Swift.String, qid: Swift.String, cuid: Swift.String, version: Swift.String, stream: Swift.Bool, messages: [MagicTool.DcsChatRequestBody.DcsChatRequestMeeage])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @objcMembers public class DcsChatRequestBody : ObjectiveC.NSObject, Swift.Encodable {
  @objc public init(mode: Swift.UInt8, pid: Swift.String, qid: Swift.String, userId: Swift.String, data: MagicTool.DcsChatRequestBody.DcsChatRequestData, dcsData: MagicTool.DcsChatRequestBody.DcsChatRequestDcsData?)
  @objc @objcMembers public class DcsChatRequestData : ObjectiveC.NSObject, Swift.Encodable {
    @objc public init(prompt: Swift.String, stream: Swift.Bool, maxTokens: Swift.Int, messages: [MagicTool.DcsChatRequestBody.DcsChatRequestMeeage])
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
  }
  @objc @objcMembers public class DcsChatRequestMeeage : ObjectiveC.NSObject, Swift.Encodable {
    @objc public init(role: Swift.String, content: Swift.String)
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
  }
  @objc @objcMembers public class DcsChatRequestDcsData : ObjectiveC.NSObject, Swift.Encodable {
    @objc public init(cuid: Swift.String, didp: Swift.String, sn: Swift.String, events: Swift.String)
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class MagicClientManager : ObjectiveC.NSObject {
  public static var isRegister: Swift.Bool
  public init(clientId: Swift.String, clientSecret: Swift.String, deviceId: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MapClientBuilder : ObjectiveC.NSObject, MagicTool.IClientBuilder {
  @objc override dynamic public init()
  @objc public func withDeviceId(deviceId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withBundleId(bundleId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withClientId(clientId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withClientSecret(secret: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func builder() -> any MagicTool.IMagicClient
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class TranslateClientBuilder : ObjectiveC.NSObject, MagicTool.IClientBuilder {
  @objc override dynamic public init()
  @objc public func withDeviceId(deviceId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withBundleId(bundleId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withClientId(clientId: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func withClientSecret(secret: Swift.String) -> any MagicTool.IClientBuilder
  @objc public func builder() -> any MagicTool.IMagicClient
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MapAuthResultBean : ObjectiveC.NSObject {
  @objc public var key: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class TranslateClientImpl : ObjectiveC.NSObject {
  @objc public func translate(content: Swift.String, from: Swift.String, to: Swift.String, callBack: any MagicTool.TranslateCallback)
  @objc deinit
}
@objc public protocol MapCallback {
  @objc func mapSuccess(result: MagicTool.MapAuthResultBean?)
  @objc func mapFailure(reason: Foundation.NSError?)
}
@objc public protocol VopCallback {
  @objc func asrResult(result: Swift.String?)
  @objc func asrEnded()
  @objc func ttsReult(result: Swift.String?)
  @objc func dcschatResult(result: Swift.String?)
  @objc func failure(reason: Foundation.NSError?)
}
extension MagicTool.MapClientImpl : MagicTool.IMagicClient {}
extension MagicTool.VopClientImpl : MagicTool.IMagicClient {}
extension MagicTool.TranslateClientImpl : MagicTool.IMagicClient {}
