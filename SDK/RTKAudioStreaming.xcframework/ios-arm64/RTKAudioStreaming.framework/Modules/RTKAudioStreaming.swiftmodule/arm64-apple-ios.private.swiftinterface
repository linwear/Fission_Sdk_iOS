// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RTKAudioStreaming
import AudioToolbox
import Foundation
@_exported import RTKAudioStreaming
import RTKLEFoundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public let kAudioFormatSbc: CoreAudioTypes.AudioFormatID
public let kSbcFormatFlagIsBigEndian: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagBlocksBits: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagIs4Blocks: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagIs8Blocks: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagIs12Blocks: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagIs16Blocks: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagAllocationBits: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagIsLoundnessAllocation: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagIsSNRAllocation: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagSubbandBits: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagIs4Subband: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagIs8Subband: CoreAudioTypes.AudioFormatFlags
public let kSbcFormatFlagBitPoolBits: CoreAudioTypes.AudioFormatFlags
public class SBCCoding : RTKAudioStreaming.StreamInputable, RTKAudioStreaming.StreamOutputable {
  public enum Frequency : Swift.Int {
    case _16000
    case _32000
    case _44100
    case _48000
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ChannelMode {
    case mono
    case dual
    case stereo
    case jointStereo
    public static func == (a: RTKAudioStreaming.SBCCoding.ChannelMode, b: RTKAudioStreaming.SBCCoding.ChannelMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Subband {
    case _4
    case _8
    public static func == (a: RTKAudioStreaming.SBCCoding.Subband, b: RTKAudioStreaming.SBCCoding.Subband) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Endianess {
    case little
    case big
    public static func == (a: RTKAudioStreaming.SBCCoding.Endianess, b: RTKAudioStreaming.SBCCoding.Endianess) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Block : Swift.Int {
    case _4
    case _8
    case _12
    case _16
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum AllocationMethod {
    case loudness
    case SNR
    public static func == (a: RTKAudioStreaming.SBCCoding.AllocationMethod, b: RTKAudioStreaming.SBCCoding.AllocationMethod) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public class SBCConfiguration {
    public var freq: RTKAudioStreaming.SBCCoding.Frequency
    public var mode: RTKAudioStreaming.SBCCoding.ChannelMode
    public var subband: RTKAudioStreaming.SBCCoding.Subband
    public var blocks: RTKAudioStreaming.SBCCoding.Block
    public var endian: RTKAudioStreaming.SBCCoding.Endianess
    public var allocation: RTKAudioStreaming.SBCCoding.AllocationMethod
    public var bitpool: Swift.UInt8
    @objc deinit
    public var frameLen: Swift.Int {
      get
    }
    public var codeSize: Swift.Int {
      get
    }
    public init()
  }
  final public let config: RTKAudioStreaming.SBCCoding.SBCConfiguration
  public init(audioFrom upstream: any RTKAudioStreaming.StreamOutputable, configuration config: RTKAudioStreaming.SBCCoding.SBCConfiguration) throws
  public func addStreamTarget(_ target: any RTKAudioStreaming.StreamInputable)
  public var inDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public var outDataFormat: CoreAudioTypes.AudioStreamBasicDescription
  public func onAudioStreamFlowStart()
  public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  public func onAudioStreamFlowEnd()
  @objc deinit
}
@_inheritsConvenienceInitializers public class SBCEncoder : RTKAudioStreaming.SBCCoding {
  override public init(audioFrom upstream: any RTKAudioStreaming.StreamOutputable, configuration config: RTKAudioStreaming.SBCCoding.SBCConfiguration) throws
  override public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  override public func onAudioStreamFlowEnd()
  @objc deinit
}
public class SBCDecoder : RTKAudioStreaming.SBCCoding {
  public init(audioFrom upstream: any RTKAudioStreaming.StreamOutputable) throws
  override public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OpusCoding : RTKAudioStreaming.StreamInputable, RTKAudioStreaming.StreamOutputable {
  public enum OpusError : Swift.Error {
    case opus
    public static func == (a: RTKAudioStreaming.OpusCoding.OpusError, b: RTKAudioStreaming.OpusCoding.OpusError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var inDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public var outDataFormat: CoreAudioTypes.AudioStreamBasicDescription
  public func addStreamTarget(_ target: any RTKAudioStreaming.StreamInputable)
  public func onAudioStreamFlowStart()
  public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  public func onAudioStreamFlowEnd()
  @objc deinit
}
@_inheritsConvenienceInitializers public class OpusEncoder : RTKAudioStreaming.OpusCoding {
  public init(audioFrom upstream: any RTKAudioStreaming.StreamOutputable) throws
  @objc deinit
  override public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  override public func onAudioStreamFlowEnd()
}
@_inheritsConvenienceInitializers public class OpusDecoder : RTKAudioStreaming.OpusCoding {
  public init(audioFrom upstream: any RTKAudioStreaming.StreamOutputable) throws
  @objc deinit
  override public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
}
public enum AudioQueueError : Swift.Error {
  case failure(Darwin.OSStatus)
}
public class RecordSource : RTKAudioStreaming.StreamOutputable {
  public var outDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public init(dataFormat: CoreAudioTypes.AudioStreamBasicDescription) throws
  @objc deinit
  public var queueBufferSize: Swift.UInt32 {
    get
  }
  public func record() throws
  public func stop() throws
  public var isRecording: Swift.Bool {
    get
  }
  public var timeStamp: Foundation.TimeInterval {
    get
  }
  public var magicCookie: Foundation.Data {
    get
  }
  public func addStreamTarget(_ target: any RTKAudioStreaming.StreamInputable)
}
public enum AudioFileError : Swift.Error {
  case create
  case open(result: Darwin.OSStatus)
  case read(result: Darwin.OSStatus)
  case invalidFormat
  case noMoreData
}
public class FileSource : RTKAudioStreaming.StreamOutputable {
  public init(fileURL url: Foundation.URL) throws
  @objc deinit
  public var outDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public func readPackets(count: Swift.Int = 10) throws -> Swift.Int
  public var progress: Swift.Float {
    get
  }
  public func addStreamTarget(_ target: any RTKAudioStreaming.StreamInputable)
}
public class SbcFileSource : RTKAudioStreaming.StreamOutputable {
  public init(fileURL url: Foundation.URL) throws
  @objc deinit
  final public let outDataFormat: CoreAudioTypes.AudioStreamBasicDescription
  public func readPackets(count: Swift.Int = 10) throws -> Swift.Int
  public func addStreamTarget(_ target: any RTKAudioStreaming.StreamInputable)
}
public class OpusFileSource : RTKAudioStreaming.StreamOutputable {
  public init(fileURL url: Foundation.URL) throws
  @objc deinit
  final public let outDataFormat: CoreAudioTypes.AudioStreamBasicDescription
  public func readPackets(count: Swift.Int = 10) throws
  public func addStreamTarget(_ target: any RTKAudioStreaming.StreamInputable)
}
open class PeripheralSource : RTKAudioStreaming.StreamOutputable {
  open var outDataFormat: CoreAudioTypes.AudioStreamBasicDescription
  public init()
  public var downstreams: [any RTKAudioStreaming.StreamInputable] {
    get
  }
  public func addStreamTarget(_ target: any RTKAudioStreaming.StreamInputable)
  @objc deinit
}
open class PeripheralSink : RTKAudioStreaming.StreamInputable {
  unowned final public let upstream: any RTKAudioStreaming.StreamOutputable
  public var inDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public init(audioFrom upstream: any RTKAudioStreaming.StreamOutputable) throws
  open func onAudioStreamFlowStart()
  open func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  open func onAudioStreamFlowEnd()
  @objc deinit
}
public class FileSink : RTKAudioStreaming.StreamInputable {
  final public let fileURL: Foundation.URL
  final public let fileFormat: AudioToolbox.AudioFileTypeID
  public var inDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public init(fileUrl url: Foundation.URL, fileFormat type: AudioToolbox.AudioFileTypeID, audioFrom upstream: any RTKAudioStreaming.StreamOutputable) throws
  @objc deinit
  public var estimatedDuration: Foundation.TimeInterval {
    get
  }
  public func set(magicCookie cookie: Foundation.Data)
  public func onAudioStreamFlowStart()
  public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  public func onAudioStreamFlowEnd()
}
public class SbcFileSink : RTKAudioStreaming.StreamInputable {
  public var inDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public init(fileUrl url: Foundation.URL, audioFrom upstream: any RTKAudioStreaming.StreamOutputable) throws
  @objc deinit
  public func onAudioStreamFlowStart()
  public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  public func onAudioStreamFlowEnd()
}
public class OpusFileSink : RTKAudioStreaming.StreamInputable {
  public var inDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public init(fileUrl url: Foundation.URL, audioFrom upstream: any RTKAudioStreaming.StreamOutputable) throws
  @objc deinit
  public func onAudioStreamFlowStart()
  public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  public func onAudioStreamFlowEnd()
}
public enum AudioStreamError : Swift.Error {
  case unacceptableData
  public static func == (a: RTKAudioStreaming.AudioStreamError, b: RTKAudioStreaming.AudioStreamError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol StreamInputable : AnyObject {
  var inDataFormat: CoreAudioTypes.AudioStreamBasicDescription { get }
  func onAudioStreamFlowStart()
  func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  func onAudioStreamFlowEnd()
}
extension RTKAudioStreaming.StreamInputable {
  public func onAudioStreamFlowStart()
  public func onAudioStreamFlowEnd()
}
public protocol StreamOutputable : AnyObject {
  var outDataFormat: CoreAudioTypes.AudioStreamBasicDescription { get }
  func addStreamTarget(_ target: any RTKAudioStreaming.StreamInputable)
}
public class PlaybackSink : RTKAudioStreaming.StreamInputable {
  public var inDataFormat: CoreAudioTypes.AudioStreamBasicDescription {
    get
  }
  public init(audioFrom upstream: any RTKAudioStreaming.StreamOutputable) throws
  @objc deinit
  public var queueBufferSize: Swift.UInt32 {
    get
    set
  }
  public var maxPacketNumForBuffer: Swift.UInt32 {
    get
  }
  public var audioDataAcquireHandler: (() throws -> Swift.Void)!
  public func play() throws
  public func stop() throws
  public var isPlaying: Swift.Bool {
    get
  }
  public var timeStamp: Foundation.TimeInterval {
    get
  }
  public func onAudioStreamFlowStart()
  public func receiveAudio(bytes bufferPtr: Swift.UnsafeRawPointer, size: Swift.UInt, packetNum: Swift.UInt, packetDescriptions descs: Swift.UnsafePointer<CoreAudioTypes.AudioStreamPacketDescription>?)
  public func onAudioStreamFlowEnd()
}
extension RTKAudioStreaming.SBCCoding.Frequency : Swift.Equatable {}
extension RTKAudioStreaming.SBCCoding.Frequency : Swift.Hashable {}
extension RTKAudioStreaming.SBCCoding.Frequency : Swift.RawRepresentable {}
extension RTKAudioStreaming.SBCCoding.ChannelMode : Swift.Equatable {}
extension RTKAudioStreaming.SBCCoding.ChannelMode : Swift.Hashable {}
extension RTKAudioStreaming.SBCCoding.Subband : Swift.Equatable {}
extension RTKAudioStreaming.SBCCoding.Subband : Swift.Hashable {}
extension RTKAudioStreaming.SBCCoding.Endianess : Swift.Equatable {}
extension RTKAudioStreaming.SBCCoding.Endianess : Swift.Hashable {}
extension RTKAudioStreaming.SBCCoding.Block : Swift.Equatable {}
extension RTKAudioStreaming.SBCCoding.Block : Swift.Hashable {}
extension RTKAudioStreaming.SBCCoding.Block : Swift.RawRepresentable {}
extension RTKAudioStreaming.SBCCoding.AllocationMethod : Swift.Equatable {}
extension RTKAudioStreaming.SBCCoding.AllocationMethod : Swift.Hashable {}
extension RTKAudioStreaming.OpusCoding.OpusError : Swift.Equatable {}
extension RTKAudioStreaming.OpusCoding.OpusError : Swift.Hashable {}
extension RTKAudioStreaming.AudioStreamError : Swift.Equatable {}
extension RTKAudioStreaming.AudioStreamError : Swift.Hashable {}
